#!/bin/bash
### BEGIN INIT INFO
# Provides:          ircddbgateway
# Required-Start:    $network $local_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ircDDBGateway
# Description:       ircDDBGateway is a free internet gateway for D-Star Digital Voice on amateur radio
### END INIT INFO

# Author: Hans-J. Barthen DL5DI <dl5di@gmx.de>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
# (settings may be overwritten by options in /etc/default/ircddbgateway)

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=ircddbgateway             # Introduce a short description here
NAME=ircddbgateway             # Introduce the short server's name here
DAEMON_NAME=ircddbgatewayd     # Introduce the server's location here
DAEMON_PATH=/usr/bin/$DAEMON_NAME
DAEMON_ARGS=""                 # Arguments to run the daemon with
DAEMON_USER=opendv             # Daemon user 
PIDFILE=/var/run/opendv/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if not started as root (required for tapi control)
if [ $UID -ne 0 ]; then
	echo
	echo "ERROR:  This script must be run as the root user!"
	echo "        Please use 'su' or log in as root and try again."
	echo
	exit 1
fi

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME || exit 2

# Exit if the package is not installed
[ -x $DAEMON_PATH ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	# Check if the PID directory and file exists and the actual status of the process
	PIDDIR=$(dirname "$PIDFILE")
	if [ ! -d "$PIDDIR" ]; then
		mkdir $PIDDIR
		chown $DAEMON_USER $PIDDIR
	else
		if [ -e $PIDFILE ]; then
			status_of_proc -p $PIDFILE $DAEMON_PATH "$NAME process" && status="0" || status="$?"
			# If the status is SUCCESS then don't need to start again.
			if [ $status = "0" ]; then
				return 1 # Exit
			fi
		fi
	fi

	#	setting the time might be necessary on systems without realtime clock
	ps aux | grep ntpd | grep -vq grep && /etc/init.d/ntp stop
	ntpdate pool.ntp.org
	[ -x /etc/init.d/ntp ] && /etc/init.d/ntp start

	start-stop-daemon --start --quiet --chuid $DAEMON_USER --exec $DAEMON_PATH -- $DAEMON_ARGS || return 2
	sleep 2
	
	# create a watchdog entry to the crontab
	echo "*/10 * * * * root ps aux | grep $DAEMON_NAME | grep -vq grep || /etc/init.d/$NAME start" > /etc/cron.d/$NAME
	
	if [ "${IRCDDBGATEWAY_DDENABLED}" = "yes" ]; then
	    echo " - wait until DD-mode interface is up"
	    count=0
	    while ! grep -q $IRCDDBGATEWAY_DDDEV /proc/net/dev; do
	    	sleep 1
	    	echo -n "."
	    	if [ $count -gt 60 ]; then
	    	    echo "Error!! DD-interface $IRCDDBGATEWAY_DDDEV was not created"
	    	    exit 1
	    	fi
	    	let count=$count+1
	    done
	    echo "OK"
	    echo " - configure dd-mode network device $IRCDDBGATEWAY_DDDEV "
	    /sbin/ifconfig $IRCDDBGATEWAY_DDDEV $IRCDDBGATEWAY_DDIP netmask $IRCDDBGATEWAY_DDMASK
    	    echo 1 > /proc/sys/net/ipv4/ip_forward
	    if [ "${IRCDDBGATEWAY_DDDHCP}" = "yes" ]; then
			echo " - start dhcpd "
			[ -x "/etc/init.d/dhcpd" ] && /etc/init.d/dhcpd start
			sleep 3
			[ -x /home/opendv/ircddbgateway/dd-services.sh ] && /home/opendv/ircddbgateway/dd-services.sh
	    fi
	fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	if [ "${IRCDDBGATEWAY_DDENABLED}" = "yes" -a  "${IRCDDBGATEWAY_DDDHCP}" = "yes" ]; then
    	    echo " - dhcp for dd-mode is enabled, stop it "
    	    [ -x "/etc/init.d/dhcpd" ] && /etc/init.d/dhcpd stop
    	    sleep 15
	fi                    

	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $DAEMON_NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON_PATH
	[ "$?" = 2 ] && return 2
	
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	# remove watchdog entry from crontab
	rm -f /etc/cron.d/ircddbgateway
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $DAEMON_NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
        status_of_proc "$DAEMON_NAME" "$NAME" && exit 0 || exit $?
        ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
